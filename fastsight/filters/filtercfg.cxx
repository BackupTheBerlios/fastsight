// generated by Fast Light User Interface Designer (fluid) version 1.0106

#include "filtercfg.h"
#include "filters.h"

Fl_Double_Window *filterswnd=(Fl_Double_Window *)0;

Fl_Check_Button *grayscale_enabled=(Fl_Check_Button *)0;

static void cb_grayscale_enabled(Fl_Check_Button*, void*) {
  filters_set_enabled((void *)filter_grayscale_apply, grayscale_enabled->value());
}

Fl_Check_Button *average_enabled=(Fl_Check_Button *)0;

static void cb_average_enabled(Fl_Check_Button*, void*) {
  filters_set_enabled((void *)filter_average_apply, average_enabled->value());
}

Fl_Check_Button *range_enabled=(Fl_Check_Button *)0;

static void cb_range_enabled(Fl_Check_Button*, void*) {
  filters_set_enabled((void *)filter_range_apply, range_enabled->value());
}

Fl_Double_Window* make_filters_wnd() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = filterswnd = new Fl_Double_Window(130, 110, "Filters");
    w = o;
    o->color(FL_LIGHT2);
    { Fl_Check_Button* o = grayscale_enabled = new Fl_Check_Button(10, 65, 90, 20, "Grayscale");
      o->tooltip("Grayscale filter.");
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_grayscale_enabled);
    }
    { Fl_Check_Button* o = average_enabled = new Fl_Check_Button(10, 15, 90, 20, "Average");
      o->tooltip("Average filter.");
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_average_enabled);
    }
    { Fl_Check_Button* o = range_enabled = new Fl_Check_Button(10, 40, 65, 20, "Range");
      o->tooltip("Find the lower and higher pixel value, and scale these values to max and min.");
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->callback((Fl_Callback*)cb_range_enabled);
    }
    o->end();
  }
  return w;
}
